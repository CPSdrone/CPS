
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005b  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001d7  00000000  00000000  00000399  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011f  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000369  00000000  00000000  0000068f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c1  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000121  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  78:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ioinit>:
	
}

void ioinit (void)
{
	PORTB = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	85 b9       	out	0x05, r24	; 5
	DDRB = ((1<<CS) | (1<<MOSI) | (1<<SCK) | (1<<RESET));
  84:	8d e2       	ldi	r24, 0x2D	; 45
  86:	84 b9       	out	0x04, r24	; 4

    TCCR2B = (1<<CS21); //Set Prescaler to 8. CS21=1
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	80 93 b1 00 	sts	0x00B1, r24

}
  8e:	08 95       	ret

00000090 <delay_us>:

//General short delays
void delay_us(int x)
{
  90:	fc 01       	movw	r30, r24
	int y, z, a;
	
	y = x/256;
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	71 e0       	ldi	r23, 0x01	; 1
  96:	0e 94 3c 01 	call	0x278	; 0x278 <__divmodhi4>
  9a:	9b 01       	movw	r18, r22
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	06 c0       	rjmp	.+12     	; 0xae <delay_us+0x1e>
	z = x - y * 256;
	
	for (a = 0; a < y; a++)
	{
		TIFR2 |= 0x01;//Clear any interrupt flags on Timer2
  a2:	b8 9a       	sbi	0x17, 0	; 23
		
		TCNT2 = 0; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
  a4:	10 92 b2 00 	sts	0x00B2, r1
	
		while(!(TIFR2 & 0x01));
  a8:	b8 9b       	sbis	0x17, 0	; 23
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <delay_us+0x18>
	int y, z, a;
	
	y = x/256;
	z = x - y * 256;
	
	for (a = 0; a < y; a++)
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	82 17       	cp	r24, r18
  b0:	93 07       	cpc	r25, r19
  b2:	bc f3       	brlt	.-18     	; 0xa2 <delay_us+0x12>
	
		while(!(TIFR2 & 0x01));
		
	}
	
	TIFR2 |= 0x01;//Clear any interrupt flags on Timer2
  b4:	b8 9a       	sbi	0x17, 0	; 23
	
	TCNT2 = 256-z; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	9f ef       	ldi	r25, 0xFF	; 255
  ba:	ac 01       	movw	r20, r24
  bc:	24 9f       	mul	r18, r20
  be:	c0 01       	movw	r24, r0
  c0:	25 9f       	mul	r18, r21
  c2:	90 0d       	add	r25, r0
  c4:	34 9f       	mul	r19, r20
  c6:	90 0d       	add	r25, r0
  c8:	11 24       	eor	r1, r1
  ca:	8e 0f       	add	r24, r30
  cc:	9f 1f       	adc	r25, r31
  ce:	81 95       	neg	r24
  d0:	80 93 b2 00 	sts	0x00B2, r24

	while(!(TIFR2 & 0x01));
  d4:	b8 9b       	sbis	0x17, 0	; 23
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <delay_us+0x44>
	
}
  d8:	08 95       	ret

000000da <delay_ms>:

//General short delays
void delay_ms(uint16_t x)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	11 c0       	rjmp	.+34     	; 0x104 <delay_ms+0x2a>
	for (; x > 0 ; x--)
    {
        delay_us(250);
  e2:	8a ef       	ldi	r24, 0xFA	; 250
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 48 00 	call	0x90	; 0x90 <delay_us>
        delay_us(250);
  ea:	8a ef       	ldi	r24, 0xFA	; 250
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 48 00 	call	0x90	; 0x90 <delay_us>
        delay_us(250);
  f2:	8a ef       	ldi	r24, 0xFA	; 250
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 48 00 	call	0x90	; 0x90 <delay_us>
        delay_us(250);
  fa:	8a ef       	ldi	r24, 0xFA	; 250
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 48 00 	call	0x90	; 0x90 <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
	for (; x > 0 ; x--)
 102:	21 97       	sbiw	r28, 0x01	; 1
 104:	20 97       	sbiw	r28, 0x00	; 0
 106:	69 f7       	brne	.-38     	; 0xe2 <delay_ms+0x8>
        delay_us(250);
        delay_us(250);
        delay_us(250);
    }
	
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <SPI_write>:
{
	unsigned char SPICount;                                       // Counter used to clock out the data

	unsigned char SPIData;                                        // Define a data structure for the SPI data
	
	PORTB |= (1<<CS);                                        		// Make sure we start with active-low CS high
 10e:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1<<SCK);                                       		// and CK low
 110:	2d 98       	cbi	0x05, 5	; 5
	
	SPIData = address;                                            // Preload the data to be sent with Address
	PORTB &= ~(1<<CS);                                           // Set active-low CS low to start the SPI cycle 
 112:	2a 98       	cbi	0x05, 2	; 5
 114:	90 e0       	ldi	r25, 0x00	; 0

	
	for (SPICount = 0; SPICount < 8; SPICount++)                  // Prepare to clock out the Address byte
	{
		if (SPIData & 0x80) PORTB |= (1<<MOSI);           				// Check for a 1 and set the MOSI line appropriately
 116:	87 ff       	sbrs	r24, 7
 118:	02 c0       	rjmp	.+4      	; 0x11e <SPI_write+0x10>
 11a:	2b 9a       	sbi	0x05, 3	; 5
 11c:	01 c0       	rjmp	.+2      	; 0x120 <SPI_write+0x12>

		else PORTB &= ~(1<<MOSI);
 11e:	2b 98       	cbi	0x05, 3	; 5
		
		PORTB |= (1<<SCK);                                         // Toggle the clock line
 120:	2d 9a       	sbi	0x05, 5	; 5
		PORTB &= ~(1<<SCK);
 122:	2d 98       	cbi	0x05, 5	; 5
	
	SPIData = address;                                            // Preload the data to be sent with Address
	PORTB &= ~(1<<CS);                                           // Set active-low CS low to start the SPI cycle 

	
	for (SPICount = 0; SPICount < 8; SPICount++)                  // Prepare to clock out the Address byte
 124:	9f 5f       	subi	r25, 0xFF	; 255
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	11 f0       	breq	.+4      	; 0x12e <SPI_write+0x20>
		else PORTB &= ~(1<<MOSI);
		
		PORTB |= (1<<SCK);                                         // Toggle the clock line
		PORTB &= ~(1<<SCK);
		
		SPIData <<= 1;                                              // Rotate to get the next bit
 12a:	88 0f       	add	r24, r24
 12c:	f4 cf       	rjmp	.-24     	; 0x116 <SPI_write+0x8>
 12e:	80 e0       	ldi	r24, 0x00	; 0
																// Repeat for the Data byte
	SPIData = byte;                                            // Preload the data to be sent with Data
	
	for (SPICount = 0; SPICount < 8; SPICount++)
	{
		if (SPIData & 0x80) PORTB |= (1<<MOSI);
 130:	67 ff       	sbrs	r22, 7
 132:	02 c0       	rjmp	.+4      	; 0x138 <SPI_write+0x2a>
 134:	2b 9a       	sbi	0x05, 3	; 5
 136:	01 c0       	rjmp	.+2      	; 0x13a <SPI_write+0x2c>

		else PORTB &= ~(1<<MOSI);
 138:	2b 98       	cbi	0x05, 3	; 5
		
		PORTB |= (1<<SCK); 
 13a:	2d 9a       	sbi	0x05, 5	; 5
		PORTB &= ~(1<<SCK);
 13c:	2d 98       	cbi	0x05, 5	; 5
	}                                                             // and loop back to send the next bit
														
																// Repeat for the Data byte
	SPIData = byte;                                            // Preload the data to be sent with Data
	
	for (SPICount = 0; SPICount < 8; SPICount++)
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	11 f0       	breq	.+4      	; 0x148 <SPI_write+0x3a>
		else PORTB &= ~(1<<MOSI);
		
		PORTB |= (1<<SCK); 
		PORTB &= ~(1<<SCK);
		
		SPIData <<= 1; 
 144:	66 0f       	add	r22, r22
 146:	f4 cf       	rjmp	.-24     	; 0x130 <SPI_write+0x22>
	}           
	
	PORTB |= (1<<CS);
 148:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1<<MOSI);
 14a:	2b 98       	cbi	0x05, 3	; 5

}
 14c:	08 95       	ret

0000014e <SPI_read>:
	unsigned char SPICount;                                       // Counter used to clock out the data
  
	char SPIData; 
	char temp;
	
	PORTB |= (1<<CS);                                        		// Make sure we start with active-low CS high
 14e:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1<<SCK);                                       		// and CK low
 150:	2d 98       	cbi	0x05, 5	; 5
	
	SPIData = address;                                            // Preload the data to be sent with Address
	PORTB &= ~(1<<CS);                                           // Set active-low CS low to start the SPI cycle 
 152:	2a 98       	cbi	0x05, 2	; 5
 154:	90 e0       	ldi	r25, 0x00	; 0

	
	for (SPICount = 0; SPICount < 8; SPICount++)                  // Prepare to clock out the Address byte
	{
		if (SPIData & 0x80) PORTB |= (1<<MOSI);           				// Check for a 1 and set the MOSI line appropriately
 156:	87 ff       	sbrs	r24, 7
 158:	02 c0       	rjmp	.+4      	; 0x15e <SPI_read+0x10>
 15a:	2b 9a       	sbi	0x05, 3	; 5
 15c:	01 c0       	rjmp	.+2      	; 0x160 <SPI_read+0x12>

		else PORTB &= ~(1<<MOSI);
 15e:	2b 98       	cbi	0x05, 3	; 5
		
		PORTB |= (1<<SCK);                                         // Toggle the clock line
 160:	2d 9a       	sbi	0x05, 5	; 5
		PORTB &= ~(1<<SCK);
 162:	2d 98       	cbi	0x05, 5	; 5
	
	SPIData = address;                                            // Preload the data to be sent with Address
	PORTB &= ~(1<<CS);                                           // Set active-low CS low to start the SPI cycle 

	
	for (SPICount = 0; SPICount < 8; SPICount++)                  // Prepare to clock out the Address byte
 164:	9f 5f       	subi	r25, 0xFF	; 255
 166:	98 30       	cpi	r25, 0x08	; 8
 168:	11 f0       	breq	.+4      	; 0x16e <SPI_read+0x20>
		else PORTB &= ~(1<<MOSI);
		
		PORTB |= (1<<SCK);                                         // Toggle the clock line
		PORTB &= ~(1<<SCK);
		
		SPIData <<= 1;                                              // Rotate to get the next bit
 16a:	88 0f       	add	r24, r24
 16c:	f4 cf       	rjmp	.-24     	; 0x156 <SPI_read+0x8>
	}                                                             // and loop back to send the next bit
	

	PORTB &= ~(1<<MOSI);                                         // Reset the MOSI data line
 16e:	2b 98       	cbi	0x05, 3	; 5
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	80 e0       	ldi	r24, 0x00	; 0
	
	SPIData = 0;
	
	for (SPICount = 0; SPICount < 8; SPICount++)                  // Prepare to clock in the data to be read
	{
		SPIData <<=1;                                               // Rotate the data
 174:	88 0f       	add	r24, r24
		PORTB |= (1<<SCK);                                         // Raise the clock to clock the data out of the MAX7456
 176:	2d 9a       	sbi	0x05, 5	; 5
		
		temp = PINB;
		if (temp & (1<<MISO)) SPIData |= 1;                       // Read the data bit
 178:	1c 99       	sbic	0x03, 4	; 3
 17a:	81 60       	ori	r24, 0x01	; 1
		
		PORTB &= ~(1<<SCK);                                       // Drop the clock ready for the next bit
 17c:	2d 98       	cbi	0x05, 5	; 5

	PORTB &= ~(1<<MOSI);                                         // Reset the MOSI data line
	
	SPIData = 0;
	
	for (SPICount = 0; SPICount < 8; SPICount++)                  // Prepare to clock in the data to be read
 17e:	9f 5f       	subi	r25, 0xFF	; 255
 180:	98 30       	cpi	r25, 0x08	; 8
 182:	c1 f7       	brne	.-16     	; 0x174 <SPI_read+0x26>
		temp = PINB;
		if (temp & (1<<MISO)) SPIData |= 1;                       // Read the data bit
		
		PORTB &= ~(1<<SCK);                                       // Drop the clock ready for the next bit
	}                                                             // and loop back
	PORTB |= (1<<CS);                                                 // Raise CS
 184:	2a 9a       	sbi	0x05, 2	; 5
					  
	return SPIData;                              // Finally return the read data


}
 186:	08 95       	ret

00000188 <main>:




int main (void)
{
 188:	1f 93       	push	r17
	
}

void ioinit (void)
{
	PORTB = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	85 b9       	out	0x05, r24	; 5
	DDRB = ((1<<CS) | (1<<MOSI) | (1<<SCK) | (1<<RESET));
 18e:	8d e2       	ldi	r24, 0x2D	; 45
 190:	84 b9       	out	0x04, r24	; 4

    TCCR2B = (1<<CS21); //Set Prescaler to 8. CS21=1
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	80 93 b1 00 	sts	0x00B1, r24
{
	char x;

    ioinit(); //Setup IO pins and defaults
	
	delay_ms(1000);
 198:	88 ee       	ldi	r24, 0xE8	; 232
 19a:	93 e0       	ldi	r25, 0x03	; 3
 19c:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms>
	
	//reset
	PORTB &= ~(1<<RESET);
 1a0:	28 98       	cbi	0x05, 0	; 5
	delay_ms(1000);
 1a2:	88 ee       	ldi	r24, 0xE8	; 232
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms>
	PORTB |= (1<<RESET);
 1aa:	28 9a       	sbi	0x05, 0	; 5
	delay_ms(1000);
 1ac:	88 ee       	ldi	r24, 0xE8	; 232
 1ae:	93 e0       	ldi	r25, 0x03	; 3
 1b0:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms>
	
	SPI_write(0,0x08);	//enable display of OSD image
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	68 e0       	ldi	r22, 0x08	; 8
 1b8:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	delay_ms(1);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms>
	
	//automatic black level control, have to read, augment and rewrite
	//The data sheet is rather specific about this
	x = SPI_read(0xEC);	
 1c4:	8c ee       	ldi	r24, 0xEC	; 236
 1c6:	0e 94 a7 00 	call	0x14e	; 0x14e <SPI_read>
 1ca:	18 2f       	mov	r17, r24
	delay_ms(1);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms>
	x &= 0xEF;
	SPI_write(0x6C,x);
 1d4:	1f 7e       	andi	r17, 0xEF	; 239
 1d6:	8c e6       	ldi	r24, 0x6C	; 108
 1d8:	61 2f       	mov	r22, r17
 1da:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	delay_ms(1);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms>
	
	SPI_write(0x04,0);//DMM set to 0
 1e6:	84 e0       	ldi	r24, 0x04	; 4
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	
	x = 25;
	
	SPI_write(0x05,0x01);//DMAH
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	
	SPI_write(0x06,x);//DMAL
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	69 e1       	ldi	r22, 0x19	; 25
 1fa:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	SPI_write(0x07,0x1D);
 1fe:	87 e0       	ldi	r24, 0x07	; 7
 200:	6d e1       	ldi	r22, 0x1D	; 29
 202:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	
	SPI_write(0x06,x+1);//DMAL
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	6a e1       	ldi	r22, 0x1A	; 26
 20a:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	SPI_write(0x07,0x0B);
 20e:	87 e0       	ldi	r24, 0x07	; 7
 210:	6b e0       	ldi	r22, 0x0B	; 11
 212:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	
	SPI_write(0x06,x+2);//DMAL
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	6b e1       	ldi	r22, 0x1B	; 27
 21a:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	SPI_write(0x07,0x17);
 21e:	87 e0       	ldi	r24, 0x07	; 7
 220:	67 e1       	ldi	r22, 0x17	; 23
 222:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	
	SPI_write(0x06,x+3);//DMAL
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	6c e1       	ldi	r22, 0x1C	; 28
 22a:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	SPI_write(0x07,0x1A);
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	6a e1       	ldi	r22, 0x1A	; 26
 232:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	
	SPI_write(0x06,x+4);//DMAL
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	6d e1       	ldi	r22, 0x1D	; 29
 23a:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	SPI_write(0x07,0x16);
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	66 e1       	ldi	r22, 0x16	; 22
 242:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	
	SPI_write(0x06,x+6);//DMAL
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	6f e1       	ldi	r22, 0x1F	; 31
 24a:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	SPI_write(0x07,0x0F);
 24e:	87 e0       	ldi	r24, 0x07	; 7
 250:	6f e0       	ldi	r22, 0x0F	; 15
 252:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
	
	
	while(1)
	{
		SPI_write(0,0x08);	//enable display of OSD image
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	68 e0       	ldi	r22, 0x08	; 8
 25a:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
		delay_ms(1000);
 25e:	88 ee       	ldi	r24, 0xE8	; 232
 260:	93 e0       	ldi	r25, 0x03	; 3
 262:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms>
		SPI_write(0,0);	//disable display of OSD image
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_write>
		delay_ms(1000);
 26e:	88 ee       	ldi	r24, 0xE8	; 232
 270:	93 e0       	ldi	r25, 0x03	; 3
 272:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms>
 276:	ef cf       	rjmp	.-34     	; 0x256 <main+0xce>

00000278 <__divmodhi4>:
 278:	97 fb       	bst	r25, 7
 27a:	09 2e       	mov	r0, r25
 27c:	07 26       	eor	r0, r23
 27e:	0a d0       	rcall	.+20     	; 0x294 <__divmodhi4_neg1>
 280:	77 fd       	sbrc	r23, 7
 282:	04 d0       	rcall	.+8      	; 0x28c <__divmodhi4_neg2>
 284:	0c d0       	rcall	.+24     	; 0x29e <__udivmodhi4>
 286:	06 d0       	rcall	.+12     	; 0x294 <__divmodhi4_neg1>
 288:	00 20       	and	r0, r0
 28a:	1a f4       	brpl	.+6      	; 0x292 <__divmodhi4_exit>

0000028c <__divmodhi4_neg2>:
 28c:	70 95       	com	r23
 28e:	61 95       	neg	r22
 290:	7f 4f       	sbci	r23, 0xFF	; 255

00000292 <__divmodhi4_exit>:
 292:	08 95       	ret

00000294 <__divmodhi4_neg1>:
 294:	f6 f7       	brtc	.-4      	; 0x292 <__divmodhi4_exit>
 296:	90 95       	com	r25
 298:	81 95       	neg	r24
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	08 95       	ret

0000029e <__udivmodhi4>:
 29e:	aa 1b       	sub	r26, r26
 2a0:	bb 1b       	sub	r27, r27
 2a2:	51 e1       	ldi	r21, 0x11	; 17
 2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <__udivmodhi4_ep>

000002a6 <__udivmodhi4_loop>:
 2a6:	aa 1f       	adc	r26, r26
 2a8:	bb 1f       	adc	r27, r27
 2aa:	a6 17       	cp	r26, r22
 2ac:	b7 07       	cpc	r27, r23
 2ae:	10 f0       	brcs	.+4      	; 0x2b4 <__udivmodhi4_ep>
 2b0:	a6 1b       	sub	r26, r22
 2b2:	b7 0b       	sbc	r27, r23

000002b4 <__udivmodhi4_ep>:
 2b4:	88 1f       	adc	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	5a 95       	dec	r21
 2ba:	a9 f7       	brne	.-22     	; 0x2a6 <__udivmodhi4_loop>
 2bc:	80 95       	com	r24
 2be:	90 95       	com	r25
 2c0:	bc 01       	movw	r22, r24
 2c2:	cd 01       	movw	r24, r26
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
